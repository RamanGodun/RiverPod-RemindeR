import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:riverpod_reminder/ui/widgets/custom_button.dart';
import 'package:riverpod_reminder/ui/widgets/custom_app_bar.dart';
import 'package:riverpod_reminder/ui/widgets/text_widget.dart';
import '../../domain/app_constants/app_strings.dart';
import '../../domain/models/enums.dart';
import '../../domain/state/features_provider.dart';
import '../../domain/utils_and_services/dialogs_service.dart';
import '../../domain/utils_and_services/helpers.dart';
import '../_theming/theme_provider.dart';
import 'other_page.dart';

/// üè† **[MyHomePage] - –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑ –∫–∞—Å—Ç–æ–º–Ω–∏–º AppBar**
class MyHomePage extends ConsumerWidget {
  const MyHomePage({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final themeMode = ref.watch(themeProvider);
    final isDarkMode = themeMode == ThemeMode.dark;
    final selectedFeature = ref.watch(featureProvider);

    return Scaffold(
      appBar: CustomAppBar(
        title: AppStrings.appTitle,
        actionIcons: [
          isDarkMode ? Icons.dark_mode : Icons.light_mode,
          Icons.settings,
        ],
        actionCallbacks: [
          () => Helpers.toggleTheme(context, ref),
          () => DialogService.showFeatureSelectionDialog(context),
        ],
      ),
      body: Center(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          spacing: 30,
          children: [
            const TextWidget(
                'Welcome to Riverpod Reminder!', TextType.bodyLarge),

            /// üöÄ **–î–∏–Ω–∞–º—ñ—á–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ —Ñ—ñ—á—ñ**
            CustomButton(
              title: 'Go to ${selectedFeature.label}',
              child: getFeatureWidget(selectedFeature),
            ),
          ],
        ),
      ),
    );
  }
}

/// üìå **–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó —Ñ—ñ—á—ñ**
Widget getFeatureWidget(AppFeature feature) {
  switch (feature) {
    case AppFeature.simpleProvider:
      return const OtherPage();
    case AppFeature.stateProvider:
      return const Placeholder(); // –¢—É—Ç –±—É–¥–µ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —ñ–Ω—à–æ—ó —Ñ—ñ—á—ñ
    default:
      return const Placeholder(); // –¢—É—Ç –±—É–¥—É—Ç—å —â–µ —ñ–Ω—à–æ—ó —Ñ—ñ—á—ñ
  }
}
